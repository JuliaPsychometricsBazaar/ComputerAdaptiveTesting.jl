var documenterSearchIndex = {"docs":
[{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Contributions are welcome. Please discuss any larger changes in the issues before making a pull request to avoid wasted work.","category":"page"},{"location":"contributing/#Running-tests","page":"Contributing","title":"Running tests","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"You can run tests locally like so:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia --project=test test/runtests.jl","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Unfortunately, Pkg.test() does not work properly at the moment. See this issue.","category":"page"},{"location":"using_your_cat/#Using-your-CAT","page":"Using your CAT","title":"Using your CAT","text":"","category":"section"},{"location":"using_your_cat/","page":"Using your CAT","title":"Using your CAT","text":"Now you've created your cat according to Creating a CAT, there are a number of ways you can use it. This section covers a few. See also the Examples.","category":"page"},{"location":"using_your_cat/#Simulating-CATs","page":"Using your CAT","title":"Simulating CATs","text":"","category":"section"},{"location":"using_your_cat/","page":"Using your CAT","title":"Using your CAT","text":"TODO","category":"page"},{"location":"using_your_cat/#Integrating-into-a-user-facing-applications","page":"Using your CAT","title":"Integrating into a user-facing applications","text":"","category":"section"},{"location":"using_your_cat/","page":"Using your CAT","title":"Using your CAT","text":"TODO","category":"page"},{"location":"using_your_cat/#Evaluating-CATs","page":"Using your CAT","title":"Evaluating CATs","text":"","category":"section"},{"location":"using_your_cat/","page":"Using your CAT","title":"Using your CAT","text":"TODO","category":"page"},{"location":"using_your_cat/#Visualising-CATs","page":"Using your CAT","title":"Visualising CATs","text":"","category":"section"},{"location":"using_your_cat/","page":"Using your CAT","title":"Using your CAT","text":"TODO","category":"page"},{"location":"using_your_cat/#Constructing-decision-trees-from-CATs","page":"Using your CAT","title":"Constructing decision trees from CATs","text":"","category":"section"},{"location":"using_your_cat/","page":"Using your CAT","title":"Using your CAT","text":"TODO","category":"page"},{"location":"examples/examples/perf_plots/","page":"Perf plots","title":"Perf plots","text":"EditURL = \"/home/runner/work/ComputerAdaptiveTesting.jl/ComputerAdaptiveTesting.jl/docs/examples/examples/perf_plots.jl\"","category":"page"},{"location":"examples/examples/perf_plots/#Perf-plots","page":"Perf plots","title":"Perf plots","text":"","category":"section"},{"location":"examples/examples/perf_plots/","page":"Perf plots","title":"Perf plots","text":"(Image: Source code) (Image: notebook)","category":"page"},{"location":"examples/examples/perf_plots/","page":"Perf plots","title":"Perf plots","text":"Plots for performance of different integrators for ability estimators","category":"page"},{"location":"examples/examples/perf_plots/","page":"Perf plots","title":"Perf plots","text":"using Makie\nimport Pkg\nusing CSV\nusing DataFrames\nusing CategoricalArrays: levels\nusing IterTools: chain\nusing ComputerAdaptiveTesting\nusing AdaptiveTestPlots\nusing AdaptiveTestPlots: LabelledToggleGrid, MenuGrid\n\nDOCS_DATA = pkgdir(ComputerAdaptiveTesting) * \"/docs/data/\"\n\n@automakie()\n\ndf = CSV.read((DOCS_DATA * \"integrator_benchmark_results.csv\"),\n    DataFrame;\n    types = Dict(\"value\" => Float64,\n        \"err\" => Float64,\n        \"bytes\" => Int64,\n        \"response\" => Int32,\n        \"item_bank\" => Int32,\n        \"dim\" => Int32,\n        \"trial\" => Int32,\n        \"time\" => Float64,\n        \"gctime\" => Float64,\n        \"rtol\" => Float64))\n\nfunction plot(df)\n    fig = Figure()\n    ax = Axis(fig[1, 1])\n\n    groupables = [\"item_bank\", \"response\", \"trial\", \"dim\", \"integrator\"]\n    regressables = [\"integrator\", \"dim\", \"rtol\", \"value\", \"err\", \"bytes\", \"gctime\"]\n\n    Menu(fig, options = [\"none\", groupables...], default = \"none\")\n    toggles = []\n    sliders = []\n    slider_idxs = []\n    menus = []\n    menu_idxs = []\n    for (idx, groupable) in enumerate(groupables)\n        push!(toggles, (label = groupable,))\n        opts = sort(levels(df[!, groupable]))\n        if eltype(opts) <: AbstractString\n            push!(slider_idxs, idx)\n            push!(menus, (label = groupable,\n                options = opts))\n        else\n            push!(menu_idxs, idx)\n            push!(sliders, (label = groupable,\n                range = opts))\n        end\n    end\n    tgrid = LabelledToggleGrid(fig,\n        toggles...,\n        width = 350,\n        tellheight = false)\n    lsgrid = SliderGrid(fig,\n        sliders...,\n        width = 350,\n        tellheight = false)\n    mgrid = MenuGrid(fig,\n        menus...,\n        width = 350,\n        tellheight = false)\n\n    working_df = Observable(nothing)\n    function update_working_df(_)\n        df_prime = df\n        slider_menu_vals = Vector{Any}(undef, length(sliders) + length(menus))\n        slider_menu_vals[slider_idxs] = [slider.value for slider in lsgrid.sliders]\n        slider_menu_vals[menu_idxs] = [menu.selection for menu in mgrid.menus]\n        for (groupable, toggle, value) in zip(groupables, tgrid.toggles, slider_menu_vals)\n            if !toggle.value\n                continue\n            end\n            df_prime = filter(working_df, groupable => value)\n        end\n        working_df[] = df_prime\n    end\n\n    for observable in chain((t.active for t in tgrid.toggles),\n        (s.value for s in lsgrid.sliders),\n        (m.selection for m in mgrid.menus))\n        on(update_working_df, observable)\n    end\n\n    x_var_menu = Menu(fig, options = regressables)\n    y_var_menu = Menu(fig, options = regressables)\n    coded_menu = Menu(fig, options = regressables)\n\n    xs = @lift($working_df !== nothing && $(x_var_menu.selection) !== nothing ?\n               $working_df[$(x_var_menu.selection)] : nothing)\n    ys = @lift($working_df !== nothing && $(y_var_menu.selection) !== nothing ?\n               $working_df[$(y_var_menu.selection)] : nothing)\n\n    scatter = @lift($xs !== nothing && $ys !== nothing &&\n                    $(coded_menu.selection) !== nothing ?\n                    lines!(ax,\n        $xs,\n        $ys;\n        color = $(coded_menu.selection)) : nothing)\n\n    fig\nend\n\nplot(df)","category":"page"},{"location":"examples/examples/perf_plots/","page":"Perf plots","title":"Perf plots","text":"<div class=\"bonito-fragment\" id=\"59792b8b-d564-4745-9fd2-d1195ef67759\" data-jscall-id=\"subsession-application-dom\">\n  <div>\n    <style></style>\n    <div></div>\n  </div>\n  <div>\n    <script type=\"module\">    Bonito.lock_loading(() => {\n        return Bonito.fetch_binary('bonito/bin/1759847cb66843a028c03231513d4db19c5788db-5544327330594536563.bin').then(msgs=> Bonito.init_session('59792b8b-d564-4745-9fd2-d1195ef67759', msgs, 'sub', false));\n    })\n</script>\n    <div style=\"width: 100%; height: 100%\" data-jscall-id=\"7\">\n      <canvas data-jp-suppress-context-menu style=\"display: block\" data-jscall-id=\"8\" data-lm-suppress-shortcuts=\"true\" tabindex=\"0\"></canvas>\n    </div>\n  </div>\n</div>","category":"page"},{"location":"examples/examples/perf_plots/","page":"Perf plots","title":"Perf plots","text":"","category":"page"},{"location":"examples/examples/perf_plots/","page":"Perf plots","title":"Perf plots","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"EditURL = \"/home/runner/work/ComputerAdaptiveTesting.jl/ComputerAdaptiveTesting.jl/docs/examples/index.md\"","category":"page"},{"location":"examples/#demo-page","page":"Examples","title":"Examples and demos","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"You can browse through the examples below. Each example has code and outputs, as well as links to download a script to run locally or to view as a Jupyter notebook on NBViewer. Some of the examples have interactive plots, and these will not currently work unless the scripts are run locally. TODO: Add binder links to examples.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"If you would like to run the examples as Jupyter notebooks locally to see interactive plots inline with the code, you can clone the repository and run docs/build_nbs.jl like so:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"$ git clone https://github.com/JuliaPsychometricsBazaar/ComputerAdaptiveTesting.jl.git\n$ cd ComputerAdaptiveTesting\n$ julia --project=. docs/build_nbs.jl","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"list-card-section\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"list-card\">\n<table>\n  <td><div class=\"list-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"How abilities converge on simulated 3PL data","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n    <div class=\"list-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example shows how to run a CAT based on a synthetic correct/incorrect 3PL IRT model.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"    </div>\n  </td>\n</tbody></table>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"list-card\">\n<table>\n  <td><div class=\"list-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"How abilities converge on simulated MIRT data","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n    <div class=\"list-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example shows how to run a CAT based on a synthetic correct/incorrect MIRT model.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"    </div>\n  </td>\n</tbody></table>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"list-card\">\n<table>\n  <td><div class=\"list-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Item Response Functions","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n    <div class=\"list-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Typically, the logistic c.d.f. is used as the transfer function in IRT. However, it in an IRT context, a scaled version intended to be close to a normal c.d.f. is often used. The main advantage is that this is usually faster to compute. ComputerAdaptiveTesting provides normalscaledlogistic, which is also used by default, for this purpose:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"    </div>\n  </td>\n</tbody></table>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"list-card\">\n<table>\n  <td><div class=\"list-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Perf plots","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n    <div class=\"list-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Perf plots","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"    </div>\n  </td>\n</tbody></table>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"list-card\">\n<table>\n  <td><div class=\"list-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Running a CAT based based on real response data","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n    <div class=\"list-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example shows how to run a CAT end-to-end on real data.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"    </div>\n  </td>\n</tbody></table>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"CurrentModule = ComputerAdaptiveTesting","category":"page"},{"location":"creating_a_cat/#Creating-a-CAT","page":"Creating a CAT","title":"Creating a CAT","text":"","category":"section"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"This guide gives a brief overview of how to create a CAT using the configuration structs in ComputerAdaptiveTesting.jl.","category":"page"},{"location":"creating_a_cat/#API-design","page":"Creating a CAT","title":"API design","text":"","category":"section"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"The configuration of a CAT is built up as a tree of configuration structs. These structs are all subtypes of CatConfigBase.","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"ComputerAdaptiveTesting.CatConfig.CatConfigBase","category":"page"},{"location":"creating_a_cat/#ComputerAdaptiveTesting.ConfigBase.CatConfigBase-creating_a_cat","page":"Creating a CAT","title":"ComputerAdaptiveTesting.ConfigBase.CatConfigBase","text":"abstract type CatConfigBase\n\n\n\n\n\n","category":"type"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"The constructors for the configuration structs in this package tend to have smart defaults. In general most constructors have two forms. The first is an explicit keyword constructor form, where all arguments are given:","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"ConfigurationObject(\n  field1=value1,\n  field1=value2,\n)","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"The second is an implicit form, where arguments are given in any order. If possible, they will be used together will appropriately guessed defaults to construct the configuration:","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"ConfigurationObject(value2, value1)","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"The implicit form is particularly useful for quick prototyping. Implicit form constructors are also available for some abstract types. In this case, they will return a concrete type that is a reasonable default for the abstract type.","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"After using the implicit form, you can print the object to see what values have been filled in. This may be useful in case you want to modify some of the defaults or switch to the explicit form.","category":"page"},{"location":"creating_a_cat/#Item-banks","page":"Creating a CAT","title":"Item banks","text":"","category":"section"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"Item banks are the source of items for the test. The basic definitions are provided by FittedItemBanks.jl and can be fit to data using RIrtWrappers.jl. See the documentation pages of those packages for more information.","category":"page"},{"location":"creating_a_cat/#CatRules","page":"Creating a CAT","title":"CatRules","text":"","category":"section"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"This is the main type for configuring a CAT. It contains the item bank, the next item selection rule, and the stopping rule. CatRules has explicit and implicit constructors.","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"ComputerAdaptiveTesting.CatConfig.CatRules","category":"page"},{"location":"creating_a_cat/#ComputerAdaptiveTesting.CatConfig.CatRules-creating_a_cat","page":"Creating a CAT","title":"ComputerAdaptiveTesting.CatConfig.CatRules","text":"struct CatRules{NextItemRuleT<:ComputerAdaptiveTesting.NextItemRules.NextItemRule, TerminationConditionT<:ComputerAdaptiveTesting.TerminationConditions.TerminationCondition, AbilityEstimatorT<:ComputerAdaptiveTesting.Aggregators.AbilityEstimator, AbilityTrackerT<:ComputerAdaptiveTesting.Aggregators.AbilityTracker} <: ComputerAdaptiveTesting.ConfigBase.CatConfigBase\n\nnext_item::ComputerAdaptiveTesting.NextItemRules.NextItemRule: The rule to choose the next item in the CAT given the current state.\n\ntermination_condition::ComputerAdaptiveTesting.TerminationConditions.TerminationCondition: The rule to choose when to terminate the CAT.\n\nability_estimator::ComputerAdaptiveTesting.Aggregators.AbilityEstimator: The ability estimator, which estimates the testee's current ability.\n\nability_tracker::ComputerAdaptiveTesting.Aggregators.AbilityTracker: The ability tracker, which tracks the testee's current ability level.  Default: NullAbilityTracker()\n\nConfiguration of the rules for a CAT. This all includes all the basic rules for the CAT's operation, but not the item bank, nor any of the interactivity hooks needed to actually run the CAT.\n\nThis may be more a more convenient layer to integrate than CatLoopConfig if you want to write your own CAT loop rather than using hooks.\n\nCatRules(; next_item=..., termination_condition=..., ability_estimator=..., ability_tracker=...)\n\nExplicit constructor for CatRules.\n\nCatRules(bits...)\n\nImplicit constructor for CatRules.\n\n\n\n\n\n","category":"type"},{"location":"creating_a_cat/#Next-item-selection-with-NextItemRule","page":"Creating a CAT","title":"Next item selection with NextItemRule","text":"","category":"section"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"The next item selection rule is the most important part of the CAT. Each rule extends the NextItemRule abstract type.","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"ComputerAdaptiveTesting.NextItemRules.NextItemRule","category":"page"},{"location":"creating_a_cat/#ComputerAdaptiveTesting.NextItemRules.NextItemRule-creating_a_cat","page":"Creating a CAT","title":"ComputerAdaptiveTesting.NextItemRules.NextItemRule","text":"abstract type NextItemRule <: ComputerAdaptiveTesting.ConfigBase.CatConfigBase\n\nAbstract base type for all item selection rules. All descendants of this type are expected to implement the interface (::NextItemRule)(responses::TrackedResponses, items::AbstractItemBank)::Int.\n\nIn practice, all adaptive rules in this package use ItemStrategyNextItemRule.\n\nNextItemRule(bits...; ability_estimator=nothing, parallel=true)\n\nImplicit constructor for NextItemRule. Uses any given NextItemRule or delegates to ItemStrategyNextItemRule the default instance.\n\n\n\n\n\n","category":"type"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"A sort of null hypothesis next item selection rule is RandomNextItemRule, which ","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"ComputerAdaptiveTesting.NextItemRules.RandomNextItemRule","category":"page"},{"location":"creating_a_cat/#ComputerAdaptiveTesting.NextItemRules.RandomNextItemRule-creating_a_cat","page":"Creating a CAT","title":"ComputerAdaptiveTesting.NextItemRules.RandomNextItemRule","text":"struct RandomNextItemRule{RandomT<:Random.AbstractRNG} <: ComputerAdaptiveTesting.NextItemRules.NextItemRule\n\nrng::Random.AbstractRNG: Default: Xoshiro()\n\nThis is the most basic rule for choosing the next item in a CAT. It simply picks a random item from the set of items that have not yet been administered.\n\n\n\n\n\n","category":"type"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"Other rules are created by combining a ItemCriterion – which somehow rates items according to how good they are – with a NextItemStrategy using an ItemStrategyNextItemRule, which acts as an adapter. The default NextItemStrategy (and currently only) is ExhaustiveSearch. When using the implicit constructors, ItemCriterion can therefore be used directly without wrapping in any place an NextItemRule is expected.","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"ComputerAdaptiveTesting.NextItemRules.ItemStrategyNextItemRule","category":"page"},{"location":"creating_a_cat/#ComputerAdaptiveTesting.NextItemRules.ItemStrategyNextItemRule-creating_a_cat","page":"Creating a CAT","title":"ComputerAdaptiveTesting.NextItemRules.ItemStrategyNextItemRule","text":"struct ItemStrategyNextItemRule{NextItemStrategyT<:ComputerAdaptiveTesting.NextItemRules.NextItemStrategy, ItemCriterionT<:ComputerAdaptiveTesting.NextItemRules.ItemCriterion} <: ComputerAdaptiveTesting.NextItemRules.NextItemRule\n\nstrategy::ComputerAdaptiveTesting.NextItemRules.NextItemStrategy\ncriterion::ComputerAdaptiveTesting.NextItemRules.ItemCriterion\n\nItemStrategyNextItemRule which together with a NextItemStrategy acts as an adapter by which an ItemCriterion can serve as a NextItemRule.\n\nItemStrategyNextItemRule(bits...; ability_estimator=nothing, parallel=true)\n\nImplicit constructor for ItemStrategyNextItemRule. Will default to ExhaustiveSearch when no NextItemStrategy is given.\n\n\n\n\n\n","category":"type"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"ComputerAdaptiveTesting.NextItemRules.ItemCriterion","category":"page"},{"location":"creating_a_cat/#ComputerAdaptiveTesting.NextItemRules.ItemCriterion-creating_a_cat","page":"Creating a CAT","title":"ComputerAdaptiveTesting.NextItemRules.ItemCriterion","text":"abstract type ItemCriterion <: ComputerAdaptiveTesting.ConfigBase.CatConfigBase\n\nAbstract type for next item criteria\n\n\n\n\n\n","category":"type"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"ComputerAdaptiveTesting.NextItemRules.NextItemStrategy","category":"page"},{"location":"creating_a_cat/#ComputerAdaptiveTesting.NextItemRules.NextItemStrategy-creating_a_cat","page":"Creating a CAT","title":"ComputerAdaptiveTesting.NextItemRules.NextItemStrategy","text":"abstract type NextItemStrategy <: ComputerAdaptiveTesting.ConfigBase.CatConfigBase\n\nAbstract type for next item strategies, tightly coupled with ItemStrategyNextItemRule. All descendants of this type are expected to implement the interface (rule::ItemStrategyNextItemRule{::NextItemStrategy, ::ItemCriterion})(responses::TrackedResponses,         items) where {ItemCriterionT <: }(strategy::NextItemStrategy)(; parallel=true)::NextItemStrategy`\n\n\n\n\n\n","category":"type"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"ComputerAdaptiveTesting.NextItemRules.ExhaustiveSearch","category":"page"},{"location":"creating_a_cat/#ComputerAdaptiveTesting.NextItemRules.ExhaustiveSearch-creating_a_cat","page":"Creating a CAT","title":"ComputerAdaptiveTesting.NextItemRules.ExhaustiveSearch","text":"struct ExhaustiveSearch <: ComputerAdaptiveTesting.NextItemRules.NextItemStrategy\n\nparallel::Bool: Default: false\n\n\n\n\n\n","category":"type"},{"location":"creating_a_cat/#Evaluating-item-and-state-merit-with-ItemCriterion-and-StateCriterion","page":"Creating a CAT","title":"Evaluating item and state merit with ItemCriterion and StateCriterion","text":"","category":"section"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"The ItemCriterion abstract type is used to rate items according to how good they are as a candidate for the next item. A typical example is InformationItemCriterion, which using the current ability estimate theta and the item response function irf to calculate each item's information fracirf_θ^2irf_θ * (1 - irf_θ).","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"Within this, you can use ExpectationBasedItemCriterion as an adapter. It takes a ResponseExpectation: either PointResponseExpectation or DistributionResponseExpectation and a a StateCriterion, which evaluates how good a particular state is in terms getting a good estimate of the test takers ability. They look one ply ahead to get the expected value of the StateCriterion after selecting the given item. The AbilityVarianceStateCriterion looks at the variance of the ability theta estimate at that state.","category":"page"},{"location":"creating_a_cat/#Stopping-rules-with-TerminationCondition","page":"Creating a CAT","title":"Stopping rules with TerminationCondition","text":"","category":"section"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"Currently the only TerminationCondition is FixedItemsTerminationCondition, which ends the test after a fixed number of items.","category":"page"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"ComputerAdaptiveTesting.TerminationConditions.TerminationCondition","category":"page"},{"location":"creating_a_cat/#ComputerAdaptiveTesting.TerminationConditions.TerminationCondition-creating_a_cat","page":"Creating a CAT","title":"ComputerAdaptiveTesting.TerminationConditions.TerminationCondition","text":"abstract type TerminationCondition <: ComputerAdaptiveTesting.ConfigBase.CatConfigBase\n\n\n\n\n\n","category":"type"},{"location":"creating_a_cat/","page":"Creating a CAT","title":"Creating a CAT","text":"ComputerAdaptiveTesting.TerminationConditions.FixedItemsTerminationCondition","category":"page"},{"location":"creating_a_cat/#ComputerAdaptiveTesting.TerminationConditions.FixedItemsTerminationCondition-creating_a_cat","page":"Creating a CAT","title":"ComputerAdaptiveTesting.TerminationConditions.FixedItemsTerminationCondition","text":"struct FixedItemsTerminationCondition <: ComputerAdaptiveTesting.TerminationConditions.TerminationCondition\n\nnum_items::Int64\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API reference","title":"API reference","text":"CurrentModule = ComputerAdaptiveTesting","category":"page"},{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [ComputerAdaptiveTesting, ComputerAdaptiveTesting.Aggregators, ComputerAdaptiveTesting.Responses, ComputerAdaptiveTesting.Sim, ComputerAdaptiveTesting.TerminationConditions, ComputerAdaptiveTesting.NextItemRules, ComputerAdaptiveTesting.CatConfig]","category":"page"},{"location":"api/#ComputerAdaptiveTesting.Aggregators","page":"API reference","title":"ComputerAdaptiveTesting.Aggregators","text":"This module takes care of integrating and optimizing over the ability/difficulty space. It includes TrackedResponses, which can store cumulative results during a test.\n\n\n\n\n\n","category":"module"},{"location":"api/#ComputerAdaptiveTesting.Aggregators.RiemannEnumerationIntegrator","page":"API reference","title":"ComputerAdaptiveTesting.Aggregators.RiemannEnumerationIntegrator","text":"In case an item bank is enumerable (e.g. GriddedItemBank), then this method integrates over the ability likihood given a set of responses with a given coefficient function using a Riemann sum (aka the rectangle rule).\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.Aggregators.maybe_tracked_ability_estimate-Tuple{ComputerAdaptiveTesting.Aggregators.TrackedResponses, Any}","page":"API reference","title":"ComputerAdaptiveTesting.Aggregators.maybe_tracked_ability_estimate","text":"This method returns a tracked point estimate if it is has the given ability estimator, otherwise it computes it using the given ability estimator.\n\n\n\n\n\n","category":"method"},{"location":"api/#ComputerAdaptiveTesting.Sim.auto_responder-Tuple{Any}","page":"API reference","title":"ComputerAdaptiveTesting.Sim.auto_responder","text":"This function constructs a next item function which automatically responds according to responses.\n\n\n\n\n\n","category":"method"},{"location":"api/#ComputerAdaptiveTesting.Sim.prompt_response-Tuple{Any, Any}","page":"API reference","title":"ComputerAdaptiveTesting.Sim.prompt_response","text":"This response callback simply prompts \n\n\n\n\n\n","category":"method"},{"location":"api/#ComputerAdaptiveTesting.Sim.run_cat-Union{Tuple{RulesT}, Tuple{CatLoopConfig{RulesT}, FittedItemBanks.AbstractItemBank}} where RulesT<:CatRules","page":"API reference","title":"ComputerAdaptiveTesting.Sim.run_cat","text":"Run a given CatLoopConfig\n\n\n\n\n\n","category":"method"},{"location":"api/#ComputerAdaptiveTesting.TerminationConditions.FixedItemsTerminationCondition","page":"API reference","title":"ComputerAdaptiveTesting.TerminationConditions.FixedItemsTerminationCondition","text":"struct FixedItemsTerminationCondition <: ComputerAdaptiveTesting.TerminationConditions.TerminationCondition\n\nnum_items::Int64\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.TerminationConditions.TerminationCondition","page":"API reference","title":"ComputerAdaptiveTesting.TerminationConditions.TerminationCondition","text":"abstract type TerminationCondition <: ComputerAdaptiveTesting.ConfigBase.CatConfigBase\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules","text":"This module implements the next item selection rules, which form the main part of CAT.\n\nBibliography\n\n[1] Linden, W. J., & Pashley, P. J. (2009). Item selection and ability estimation in adaptive testing. In Elements of adaptive testing (pp. 3-30). Springer, New York, NY.\n\n\n\n\n\n","category":"module"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.catr_next_item_aliases","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.catr_next_item_aliases","text":"This mapping provides next item rules through the same names that they are available through in the catR R package. TODO compability with mirtcat\n\n\n\n\n\n","category":"constant"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.AbilityVarianceStateCriterion","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.AbilityVarianceStateCriterion","text":"struct AbilityVarianceStateCriterion{DistEst<:ComputerAdaptiveTesting.Aggregators.DistributionAbilityEstimator, IntegratorT<:ComputerAdaptiveTesting.Aggregators.AbilityIntegrator} <: ComputerAdaptiveTesting.NextItemRules.StateCriterion\n\ndist_est::ComputerAdaptiveTesting.Aggregators.DistributionAbilityEstimator\nintegrator::ComputerAdaptiveTesting.Aggregators.AbilityIntegrator\nskip_zero::Bool\n\nThis StateCriterion returns the variance of the ability estimate given a set of responses.\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.ExhaustiveSearch","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.ExhaustiveSearch","text":"struct ExhaustiveSearch <: ComputerAdaptiveTesting.NextItemRules.NextItemStrategy\n\nparallel::Bool: Default: false\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.ExpectationBasedItemCriterion","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.ExpectationBasedItemCriterion","text":"struct ExpectationBasedItemCriterion{ResponseExpectationT<:ComputerAdaptiveTesting.NextItemRules.ResponseExpectation, CriterionT<:Union{ComputerAdaptiveTesting.NextItemRules.ItemCriterion, ComputerAdaptiveTesting.NextItemRules.StateCriterion}} <: ComputerAdaptiveTesting.NextItemRules.ItemCriterion\n\nresponse_expectation::ComputerAdaptiveTesting.NextItemRules.ResponseExpectation\ncriterion::Union{ComputerAdaptiveTesting.NextItemRules.ItemCriterion, ComputerAdaptiveTesting.NextItemRules.StateCriterion}\n\nThis ItemCriterion wraps a a ResponseExpectation and a StateCriterion or ItemCriterion to look at the criterion's expected value for a particular item 1-ply ahead.\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.ItemCriterion","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.ItemCriterion","text":"abstract type ItemCriterion <: ComputerAdaptiveTesting.ConfigBase.CatConfigBase\n\nAbstract type for next item criteria\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.ItemStrategyNextItemRule","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.ItemStrategyNextItemRule","text":"struct ItemStrategyNextItemRule{NextItemStrategyT<:ComputerAdaptiveTesting.NextItemRules.NextItemStrategy, ItemCriterionT<:ComputerAdaptiveTesting.NextItemRules.ItemCriterion} <: ComputerAdaptiveTesting.NextItemRules.NextItemRule\n\nstrategy::ComputerAdaptiveTesting.NextItemRules.NextItemStrategy\ncriterion::ComputerAdaptiveTesting.NextItemRules.ItemCriterion\n\nItemStrategyNextItemRule which together with a NextItemStrategy acts as an adapter by which an ItemCriterion can serve as a NextItemRule.\n\nItemStrategyNextItemRule(bits...; ability_estimator=nothing, parallel=true)\n\nImplicit constructor for ItemStrategyNextItemRule. Will default to ExhaustiveSearch when no NextItemStrategy is given.\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.KernelAbstractionsExhaustiveSearch","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.KernelAbstractionsExhaustiveSearch","text":"struct KernelAbstractionsExhaustiveSearch{KernelT} <: ComputerAdaptiveTesting.NextItemRules.NextItemStrategy\n\nkernel::Any\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.KernelAbstractionsExhaustiveSearchConfig","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.KernelAbstractionsExhaustiveSearchConfig","text":"struct KernelAbstractionsExhaustiveSearchConfig{ArgsT} <: ComputerAdaptiveTesting.NextItemRules.NextItemStrategy\n\nkernel_args::Any\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.NextItemRule","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.NextItemRule","text":"abstract type NextItemRule <: ComputerAdaptiveTesting.ConfigBase.CatConfigBase\n\nAbstract base type for all item selection rules. All descendants of this type are expected to implement the interface (::NextItemRule)(responses::TrackedResponses, items::AbstractItemBank)::Int.\n\nIn practice, all adaptive rules in this package use ItemStrategyNextItemRule.\n\nNextItemRule(bits...; ability_estimator=nothing, parallel=true)\n\nImplicit constructor for NextItemRule. Uses any given NextItemRule or delegates to ItemStrategyNextItemRule the default instance.\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.NextItemStrategy","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.NextItemStrategy","text":"abstract type NextItemStrategy <: ComputerAdaptiveTesting.ConfigBase.CatConfigBase\n\nAbstract type for next item strategies, tightly coupled with ItemStrategyNextItemRule. All descendants of this type are expected to implement the interface (rule::ItemStrategyNextItemRule{::NextItemStrategy, ::ItemCriterion})(responses::TrackedResponses,         items) where {ItemCriterionT <: }(strategy::NextItemStrategy)(; parallel=true)::NextItemStrategy`\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.PointResponseExpectation","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.PointResponseExpectation","text":"struct PointResponseExpectation{PointAbilityEstimatorT<:ComputerAdaptiveTesting.Aggregators.PointAbilityEstimator} <: ComputerAdaptiveTesting.NextItemRules.ResponseExpectation\n\nability_estimator::ComputerAdaptiveTesting.Aggregators.PointAbilityEstimator\n\nThis ResponseExpectation gets expected outcomes based on a point ability estimates.\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.PointwiseItemCriterion","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.PointwiseItemCriterion","text":"abstract type PointwiseItemCriterion <: ComputerAdaptiveTesting.ConfigBase.CatConfigBase\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.RandomNextItemRule","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.RandomNextItemRule","text":"struct RandomNextItemRule{RandomT<:Random.AbstractRNG} <: ComputerAdaptiveTesting.NextItemRules.NextItemRule\n\nrng::Random.AbstractRNG: Default: Xoshiro()\n\nThis is the most basic rule for choosing the next item in a CAT. It simply picks a random item from the set of items that have not yet been administered.\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.StateCriterion","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.StateCriterion","text":"abstract type StateCriterion <: ComputerAdaptiveTesting.ConfigBase.CatConfigBase\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.NextItemRules.UrryItemCriterion","page":"API reference","title":"ComputerAdaptiveTesting.NextItemRules.UrryItemCriterion","text":"struct UrryItemCriterion{AbilityEstimatorT<:ComputerAdaptiveTesting.Aggregators.PointAbilityEstimator} <: ComputerAdaptiveTesting.NextItemRules.ItemCriterion\n\nability_estimator::ComputerAdaptiveTesting.Aggregators.PointAbilityEstimator\n\nThis item criterion just picks the item with the raw difficulty closest to the current ability estimate.\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.CatConfig.CatLoopConfig","page":"API reference","title":"ComputerAdaptiveTesting.CatConfig.CatLoopConfig","text":"Configuration for a simulatable CAT.\n\n\n\n\n\n","category":"type"},{"location":"api/#ComputerAdaptiveTesting.CatConfig.CatRules","page":"API reference","title":"ComputerAdaptiveTesting.CatConfig.CatRules","text":"struct CatRules{NextItemRuleT<:ComputerAdaptiveTesting.NextItemRules.NextItemRule, TerminationConditionT<:ComputerAdaptiveTesting.TerminationConditions.TerminationCondition, AbilityEstimatorT<:ComputerAdaptiveTesting.Aggregators.AbilityEstimator, AbilityTrackerT<:ComputerAdaptiveTesting.Aggregators.AbilityTracker} <: ComputerAdaptiveTesting.ConfigBase.CatConfigBase\n\nnext_item::ComputerAdaptiveTesting.NextItemRules.NextItemRule: The rule to choose the next item in the CAT given the current state.\n\ntermination_condition::ComputerAdaptiveTesting.TerminationConditions.TerminationCondition: The rule to choose when to terminate the CAT.\n\nability_estimator::ComputerAdaptiveTesting.Aggregators.AbilityEstimator: The ability estimator, which estimates the testee's current ability.\n\nability_tracker::ComputerAdaptiveTesting.Aggregators.AbilityTracker: The ability tracker, which tracks the testee's current ability level.  Default: NullAbilityTracker()\n\nConfiguration of the rules for a CAT. This all includes all the basic rules for the CAT's operation, but not the item bank, nor any of the interactivity hooks needed to actually run the CAT.\n\nThis may be more a more convenient layer to integrate than CatLoopConfig if you want to write your own CAT loop rather than using hooks.\n\nCatRules(; next_item=..., termination_condition=..., ability_estimator=..., ability_tracker=...)\n\nExplicit constructor for CatRules.\n\nCatRules(bits...)\n\nImplicit constructor for CatRules.\n\n\n\n\n\n","category":"type"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"EditURL = \"/home/runner/work/ComputerAdaptiveTesting.jl/ComputerAdaptiveTesting.jl/docs/examples/examples/ability_convergence_3pl.jl\"","category":"page"},{"location":"examples/examples/ability_convergence_3pl/#ability_convergence_3pl","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"","category":"section"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"(Image: Source code) (Image: notebook)","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"How abilities converge on simulated 3PL data","category":"page"},{"location":"examples/examples/ability_convergence_3pl/#Running-a-CAT-based-on-a-synthetic-correct/incorrect-3PL-IRT-model","page":"How abilities converge on simulated 3PL data","title":"Running a CAT based on a synthetic correct/incorrect 3PL IRT model","text":"","category":"section"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"This example shows how to run a CAT based on a synthetic correct/incorrect 3PL IRT model.","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"Import order is important. We put ComputerAdaptiveTesting last so we get the extra dependencies.","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"using Makie\nimport Pkg\nimport Random\nusing Distributions: Normal, cdf\nusing AlgebraOfGraphics\nusing ComputerAdaptiveTesting\nusing ComputerAdaptiveTesting.Sim: auto_responder\nusing ComputerAdaptiveTesting.NextItemRules: AbilityVarianceStateCriterion\nusing ComputerAdaptiveTesting.TerminationConditions: FixedItemsTerminationCondition\nusing ComputerAdaptiveTesting.Aggregators: PriorAbilityEstimator,\n    MeanAbilityEstimator, LikelihoodAbilityEstimator\nusing FittedItemBanks\nusing ComputerAdaptiveTesting.Responses: BooleanResponse\nimport PsychometricsBazaarBase.IntegralCoeffs\nusing PsychometricsBazaarBase.Integrators\nusing PsychometricsBazaarBase.ConstDistributions: normal_scaled_logistic\nusing AdaptiveTestPlots\n\n@automakie()","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"Now we are read to generate our synthetic data using the supplied DummyData module. We generate an item bank with 100 items and fake responses for 3 testees.","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"using FittedItemBanks.DummyData: dummy_full, std_normal, SimpleItemBankSpec, StdModel3PL\n(item_bank, abilities, responses) = dummy_full(Random.default_rng(42),\n    SimpleItemBankSpec(StdModel3PL(), OneDimContinuousDomain(), BooleanResponse());\n    num_questions = 100,\n    num_testees = 3)","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"Simulate a CAT for each testee and record it using CatRecorder. CatRecorder collects information which can be used to draw different types of plots.","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"max_questions = 99\nintegrator = FixedGKIntegrator(-6, 6, 80)\ndist_ability_est = PriorAbilityEstimator(std_normal)\nability_estimator = MeanAbilityEstimator(dist_ability_est, integrator)\nrules = CatRules(ability_estimator,\n    AbilityVarianceStateCriterion(dist_ability_est, integrator),\n    FixedItemsTerminationCondition(max_questions))\n\npoints = 500\nxs = range(-2.5, 2.5, length = points)\nraw_estimator = LikelihoodAbilityEstimator()\nrecorder = CatRecorder(xs, responses, integrator, raw_estimator, ability_estimator)\nfor testee_idx in axes(responses, 2)\n    tracked_responses, θ = run_cat(CatLoopConfig(rules = rules,\n            get_response = auto_responder(@view responses[:, testee_idx]),\n            new_response_callback = (tracked_responses, terminating) -> recorder(tracked_responses,\n                testee_idx,\n                terminating)),\n        item_bank)\n    true_θ = abilities[testee_idx]\n    abs_err = abs(θ - true_θ)\nend","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"Make a plot showing how the estimated value evolves during the CAT. We also plot the 'true' values used to generate the responses.","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"conv_lines_fig = ability_evolution_lines(recorder; abilities = abilities)\nconv_lines_fig","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"Make an interactive plot, showing how the distribution of the ability likelihood evolves.","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"conv_dist_fig = lh_evolution_interactive(recorder; abilities = abilities)\nconv_dist_fig","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"","category":"page"},{"location":"examples/examples/ability_convergence_3pl/","page":"How abilities converge on simulated 3PL data","title":"How abilities converge on simulated 3PL data","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"examples/examples/irfs/","page":"Item Response Functions","title":"Item Response Functions","text":"EditURL = \"/home/runner/work/ComputerAdaptiveTesting.jl/ComputerAdaptiveTesting.jl/docs/examples/examples/irfs.jl\"","category":"page"},{"location":"examples/examples/irfs/#Item-Response-Functions","page":"Item Response Functions","title":"Item Response Functions","text":"","category":"section"},{"location":"examples/examples/irfs/","page":"Item Response Functions","title":"Item Response Functions","text":"(Image: Source code) (Image: notebook)","category":"page"},{"location":"examples/examples/irfs/","page":"Item Response Functions","title":"Item Response Functions","text":"Item Response Functions","category":"page"},{"location":"examples/examples/irfs/","page":"Item Response Functions","title":"Item Response Functions","text":"using Makie\nimport Pkg\nusing Distributions: Normal, cdf\nusing PsychometricsBazaarBase.ConstDistributions: normal_scaled_logistic\nusing AdaptiveTestPlots\n\n@automakie()","category":"page"},{"location":"examples/examples/irfs/","page":"Item Response Functions","title":"Item Response Functions","text":"Typically, the logistic c.d.f. is used as the transfer function in IRT. However, it in an IRT context, a scaled version intended to be close to a normal c.d.f. is often used. The main advantage is that this is usually faster to compute. ComputerAdaptiveTesting provides normalscaledlogistic, which is also used by default, for this purpose:","category":"page"},{"location":"examples/examples/irfs/","page":"Item Response Functions","title":"Item Response Functions","text":"xs = -8:0.05:8\nlines(xs, cdf.(Normal(), xs))\nlines!(xs, cdf.(normal_scaled_logistic, xs))\ncurrent_figure()","category":"page"},{"location":"examples/examples/irfs/","page":"Item Response Functions","title":"Item Response Functions","text":"<div class=\"bonito-fragment\" id=\"b127ec5b-42f5-4b41-983d-e33e14c1a0d4\" data-jscall-id=\"subsession-application-dom\">\n  <div>\n    <style></style>\n    <div></div>\n  </div>\n  <div>\n    <script type=\"module\">    Bonito.lock_loading(() => {\n        return Bonito.fetch_binary('bonito/bin/f086d6eaa826b4133b147342a3c862d76c5bd52c-13554297825195900910.bin').then(msgs=> Bonito.init_session('b127ec5b-42f5-4b41-983d-e33e14c1a0d4', msgs, 'sub', false));\n    })\n</script>\n    <div style=\"width: 100%; height: 100%\" data-jscall-id=\"3\">\n      <canvas data-jp-suppress-context-menu style=\"display: block\" data-jscall-id=\"4\" data-lm-suppress-shortcuts=\"true\" tabindex=\"0\"></canvas>\n    </div>\n  </div>\n</div>","category":"page"},{"location":"examples/examples/irfs/","page":"Item Response Functions","title":"Item Response Functions","text":"","category":"page"},{"location":"examples/examples/irfs/","page":"Item Response Functions","title":"Item Response Functions","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"examples/examples/vocab_iq/","page":"Running a CAT based based on real response data","title":"Running a CAT based based on real response data","text":"EditURL = \"/home/runner/work/ComputerAdaptiveTesting.jl/ComputerAdaptiveTesting.jl/docs/examples/examples/vocab_iq.jl\"","category":"page"},{"location":"examples/examples/vocab_iq/#vocab_iq","page":"Running a CAT based based on real response data","title":"Running a CAT based based on real response data","text":"","category":"section"},{"location":"examples/examples/vocab_iq/","page":"Running a CAT based based on real response data","title":"Running a CAT based based on real response data","text":"(Image: Source code) (Image: notebook)","category":"page"},{"location":"examples/examples/vocab_iq/","page":"Running a CAT based based on real response data","title":"Running a CAT based based on real response data","text":"Running a CAT based based on real response data","category":"page"},{"location":"examples/examples/vocab_iq/","page":"Running a CAT based based on real response data","title":"Running a CAT based based on real response data","text":"This example shows how to run a CAT end-to-end on real data.","category":"page"},{"location":"examples/examples/vocab_iq/","page":"Running a CAT based based on real response data","title":"Running a CAT based based on real response data","text":"First a 1-dimensional IRT model is fitted based on open response data to the vocabulary IQ test using the IRTSupport package which internally, this uses the mirt R package. Next, the model is used to administer the test interactively.","category":"page"},{"location":"examples/examples/vocab_iq/","page":"Running a CAT based based on real response data","title":"Running a CAT based based on real response data","text":"using Base.Filesystem\nusing ComputerAdaptiveTesting\nusing FittedItemBanks.DummyData: std_normal\nusing ComputerAdaptiveTesting.Sim\nusing ComputerAdaptiveTesting.NextItemRules\nusing ComputerAdaptiveTesting.TerminationConditions\nusing ComputerAdaptiveTesting.Aggregators\nusing FittedItemBanks\nusing FittedItemBanks: item_params\nimport PsychometricsBazaarBase.IntegralCoeffs\nusing PsychometricsBazaarBase.Integrators\nusing PsychometricsBazaarBase.Optimizers\nusing ItemResponseDatasets: prompt_readline\nusing ItemResponseDatasets.VocabIQ\nusing RIrtWrappers.Mirt\n\nfunction get_item_bank()\n    fit_4pl(get_marked_df_cached(); TOL = 1e-2)\nend\n\nfunction run_vocab_iq_cat()\n    item_bank, labels = get_item_bank()\n    integrator = FixedGKIntegrator(-6, 6, 61)\n    ability_integrator = AbilityIntegrator(integrator)\n    dist_ability_est = PriorAbilityEstimator(std_normal)\n    optimizer = AbilityOptimizer(OneDimOptimOptimizer(-6.0, 6.0, NelderMead()))\n    ability_estimator = ModeAbilityEstimator(dist_ability_est, optimizer)\n    @info \"run_cat\" ability_estimator\n    rules = CatRules(ability_estimator,\n        AbilityVarianceStateCriterion(dist_ability_est, ability_integrator),\n        FixedItemsTerminationCondition(45))\n    function get_response(response_idx, response_name)\n        params = item_params(item_bank, response_idx)\n        println(\"Parameters for next question: $params\")\n        prompt_readline(VocabIQ.questions[response_idx])\n    end\n    function new_response_callback(tracked_responses, terminating)\n        if tracked_responses.responses.values[end] > 0\n            println(\"Correct\")\n        else\n            println(\"Wrong\")\n        end\n        ability = ability_estimator(tracked_responses)\n        var = variance_given_mean(ability_integrator,\n            dist_ability_est,\n            tracked_responses,\n            ability)\n        println(\"Got ability estimate: $ability ± $var\")\n        println(\"\")\n    end\n    loop_config = CatLoopConfig(rules = rules,\n        get_response = get_response,\n        new_response_callback = new_response_callback)\n    run_cat(loop_config, item_bank)\nend\n\nrun_vocab_iq_cat()","category":"page"},{"location":"examples/examples/vocab_iq/","page":"Running a CAT based based on real response data","title":"Running a CAT based based on real response data","text":"","category":"page"},{"location":"examples/examples/vocab_iq/","page":"Running a CAT based based on real response data","title":"Running a CAT based based on real response data","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"EditURL = \"/home/runner/work/ComputerAdaptiveTesting.jl/ComputerAdaptiveTesting.jl/docs/examples/examples/ability_convergence_mirt.jl\"","category":"page"},{"location":"examples/examples/ability_convergence_mirt/#ability_convergence_mirt","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"","category":"section"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"(Image: Source code) (Image: notebook)","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"How abilities converge on simulated MIRT data","category":"page"},{"location":"examples/examples/ability_convergence_mirt/#Running-a-CAT-based-on-a-synthetic-correct/incorrect-MIRT-model","page":"How abilities converge on simulated MIRT data","title":"Running a CAT based on a synthetic correct/incorrect MIRT model","text":"","category":"section"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"This example shows how to run a CAT based on a synthetic correct/incorrect MIRT model.","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"Import order is important. We put ComputerAdaptiveTesting last so we get the extra dependencies.","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"using Makie\nimport Pkg\nimport Random\nusing Distributions: Normal, cdf\nusing AlgebraOfGraphics\nusing ComputerAdaptiveTesting\nusing ComputerAdaptiveTesting.Sim: auto_responder\nusing ComputerAdaptiveTesting.NextItemRules: DRuleItemCriterion\nusing ComputerAdaptiveTesting.TerminationConditions: FixedItemsTerminationCondition\nusing ComputerAdaptiveTesting.Aggregators: PriorAbilityEstimator,\n    MeanAbilityEstimator, LikelihoodAbilityEstimator\nusing FittedItemBanks\nimport PsychometricsBazaarBase.IntegralCoeffs\nusing PsychometricsBazaarBase.Integrators\nusing PsychometricsBazaarBase.ConstDistributions: normal_scaled_logistic\nusing AdaptiveTestPlots\n\n@automakie()","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"Now we are read to generate our synthetic data using the supplied DummyData module. We generate an item bank with 100 items and fake responses for 3 testees.","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"dims = 2\nusing FittedItemBanks.DummyData: dummy_full, std_mv_normal, SimpleItemBankSpec, StdModel4PL\nusing ComputerAdaptiveTesting.Responses: BooleanResponse","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"TODO: pass in dims","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"(item_bank, abilities, responses) = dummy_full(Random.default_rng(42),\n    SimpleItemBankSpec(StdModel4PL(), VectorContinuousDomain(), BooleanResponse()),\n    dims;\n    num_questions = 10,\n    num_testees = 2)","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"Simulate a CAT for each testee and record it using CatRecorder. CatRecorder collects information which can be used to draw different types of plots.","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"max_questions = 9\nintegrator = CubaIntegrator([-6.0, -6.0], [6.0, 6.0], CubaVegas(); rtol = 1e-2)\nability_estimator = MeanAbilityEstimator(PriorAbilityEstimator(std_mv_normal(dims)),\n    integrator)\nrules = CatRules(ability_estimator,\n    DRuleItemCriterion(ability_estimator),\n    FixedItemsTerminationCondition(max_questions))","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"XXX: We shouldn't need to specify xs here since the distributions are not used – rework","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"points = 3\nxs = repeat(range(-2.5, 2.5, length = points)', dims, 1)\nraw_estimator = LikelihoodAbilityEstimator()\nrecorder = CatRecorder(xs,\n    responses,\n    integrator,\n    raw_estimator,\n    ability_estimator,\n    abilities)\nfor testee_idx in axes(responses, 2)\n    @debug \"Running for testee\" testee_idx\n    tracked_responses, θ = run_cat(CatLoopConfig(rules = rules,\n            get_response = auto_responder(@view responses[:, testee_idx]),\n            new_response_callback = (tracked_responses, terminating) -> recorder(tracked_responses,\n                testee_idx,\n                terminating)),\n        item_bank)\n    true_θ = abilities[:, testee_idx]\n    abs_err = sum(abs.(θ .- true_θ))\n    @info \"convergence\" true_θ θ abs_err\nend","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"Make a plot showing how the estimated value converges during the CAT.","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"conv_lines_fig = ability_convergence_lines(recorder; abilities = abilities)\nconv_lines_fig","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"","category":"page"},{"location":"examples/examples/ability_convergence_mirt/","page":"How abilities converge on simulated MIRT data","title":"How abilities converge on simulated MIRT data","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"This is the documentation for ComputerAdaptiveTesting. For information about the purpose of the package and its installation, please see the README.md.","category":"page"},{"location":"#Contents","page":"Getting started","title":"Contents","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Creating a CAT: A guide to creating a CAT using the configuration structs in ComputerAdaptiveTesting.jl\nUsing your CAT: A collection of mini topical guides about: simulating CATs, integrating into a user-facing applications, evaluating CATs, visualising CATs, and constructing decision trees from CATs\nExamples: A collection of example code which you can run and modify to get a feel for how to use the package\nAPI reference: The full API reference for the package","category":"page"}]
}
